{
  "address": "0xA93d9DA92B77F2d633aE47F2df3B5DaFc5B63f74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pythAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "sources",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "baseCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "source",
          "type": "bytes32"
        }
      ],
      "name": "AssetSourceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "BaseCurrencySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_CURRENCY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_CURRENCY_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "getAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getSourceOfAsset",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "feedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "setPriceFeedIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ed1279a3e8f734ac3265e4a3c8f8ddf01abfe460799863aa73e914d01700adb",
  "receipt": {
    "to": null,
    "from": "0x4Aa6Da4ca5d76e8d5e3ACD11B92Ab22D564F1fcb",
    "contractAddress": "0x50527e1c72E1629cA612244f1fD7C4df18C496e2",
    "transactionIndex": 2,
    "gasUsed": "1192502",
    "logsBloom": "0x
    "blockHash": "0x286e5bd137ecbfe62f62ad160d0d70e3c6332dd04d2b7119cbdd7410639750e6",
    "transactionHash": "0x4ed1279a3e8f734ac3265e4a3c8f8ddf01abfe460799863aa73e914d01700adb",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 108646682,
        "transactionHash": "0x4ed1279a3e8f734ac3265e4a3c8f8ddf01abfe460799863aa73e914d01700adb",
        "address": "0x50527e1c72E1629cA612244f1fD7C4df18C496e2",
        "topics": [
          "0xdcb94a871091cc58901744f251f3df654c2e3c2a5745ed991e2e2457255324b9",
          "0x000000000000000000000000c9c413301718a73641771c923971bf9732f69302",
          "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x286e5bd137ecbfe62f62ad160d0d70e3c6332dd04d2b7119cbdd7410639750e6"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 108646682,
        "transactionHash": "0x4ed1279a3e8f734ac3265e4a3c8f8ddf01abfe460799863aa73e914d01700adb",
        "address": "0x50527e1c72E1629cA612244f1fD7C4df18C496e2",
        "topics": [
          "0xdcb94a871091cc58901744f251f3df654c2e3c2a5745ed991e2e2457255324b9",
          "0x000000000000000000000000e7c6103d557bc211152950e9da679857907de3a2",
          "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x286e5bd137ecbfe62f62ad160d0d70e3c6332dd04d2b7119cbdd7410639750e6"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 108646682,
        "transactionHash": "0x4ed1279a3e8f734ac3265e4a3c8f8ddf01abfe460799863aa73e914d01700adb",
        "address": "0x50527e1c72E1629cA612244f1fD7C4df18C496e2",
        "topics": [
          "0xdcb94a871091cc58901744f251f3df654c2e3c2a5745ed991e2e2457255324b9",
          "0x000000000000000000000000a77dd779a4cfc9a3fab9973c54a2a3735dafb54a",
          "0x9d4294bbcd1174d6f2003ec365831e64cc31d9f6f15a2b85399db8d5000960f6"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x286e5bd137ecbfe62f62ad160d0d70e3c6332dd04d2b7119cbdd7410639750e6"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 108646682,
        "transactionHash": "0x4ed1279a3e8f734ac3265e4a3c8f8ddf01abfe460799863aa73e914d01700adb",
        "address": "0x50527e1c72E1629cA612244f1fD7C4df18C496e2",
        "topics": [
          "0xe27c4c1372396a3d15a9922f74f9dfc7c72b1ad6d63868470787249c356454c1",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000005f5e100",
        "logIndex": 13,
        "blockHash": "0x286e5bd137ecbfe62f62ad160d0d70e3c6332dd04d2b7119cbdd7410639750e6"
      }
    ],
    "blockNumber": 108646682,
    "cumulativeGasUsed": "1471170",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc0d03D8249eD557aB1c54f46d0dc13a0C0678f25",
    "0x4374e5a8b9C22271E9EB878A2AA31DE97DF15DAF",
    [
      "0xc9c413301718A73641771c923971Bf9732f69302",
      "0xE7C6103D557bc211152950e9dA679857907De3A2",
      "0xA77DD779a4cfc9a3FAB9973c54A2A3735DaFb54a"
    ],
    [
      "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a",
      "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a",
      "0x9d4294bbcd1174d6f2003ec365831e64cc31d9f6f15a2b85399db8d5000960f6"
    ],
    "0x0000000000000000000000000000000000000000",
    "100000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "1eaa4365c44e38f8790053afb1c34d22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pythAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sources\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"BaseCurrencySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CURRENCY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CURRENCY_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"feedIds\",\"type\":\"bytes32[]\"}],\"name\":\"setPriceFeedIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_pythAddress\":\"The address of the Pyth contract\",\"assets\":\"The addresses of the assets\",\"baseCurrency\":\"The base currency used for the price quotes\",\"baseCurrencyUnit\":\"The unit of the base currency\",\"provider\":\"The address of the PoolAddressesProvider\",\"sources\":\"The address of the source of each asset\"}},\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The price of the asset\"}},\"getAssetsPrices(address[])\":{\"params\":{\"assets\":\"The list of assets addresses\"},\"returns\":{\"_0\":\"The prices of the given assets\"}},\"getSourceOfAsset(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The address of the source\"}},\"setPriceFeedIds(address[],bytes32[])\":{\"params\":{\"assets\":\"The address of the asset\",\"feedIds\":\"The Pyth price feed ID for the asset\"}}},\"stateVariables\":{\"ADDRESSES_PROVIDER\":{\"return\":\"The address of the PoolAddressesProvider contract\",\"returns\":{\"_0\":\"The address of the PoolAddressesProvider contract\"}},\"BASE_CURRENCY\":{\"details\":\"Address 0x0 is reserved for USD as base currency.\",\"return\":\"Returns the base currency address.\",\"returns\":{\"_0\":\"Returns the base currency address.\"}},\"BASE_CURRENCY_UNIT\":{\"details\":\"1 ether for ETH, 1e8 for USD.\",\"return\":\"Returns the base currency unit.\",\"returns\":{\"_0\":\"Returns the base currency unit.\"}}},\"title\":\"AaveOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the PoolAddressesProvider\"},\"BASE_CURRENCY()\":{\"notice\":\"Returns the base currency address\"},\"BASE_CURRENCY_UNIT()\":{\"notice\":\"Returns the base currency unit\"},\"constructor\":{\"notice\":\"Constructor\"},\"getAssetPrice(address)\":{\"notice\":\"Returns the asset price in the base currency\"},\"getAssetsPrices(address[])\":{\"notice\":\"Returns a list of prices from a list of assets addresses\"},\"getSourceOfAsset(address)\":{\"notice\":\"Returns the address of the source for an asset address\"},\"setPriceFeedIds(address[],bytes32[])\":{\"notice\":\"Sets the Pyth price feed ID for an asset\"}},\"notice\":\"Contract to fetch asset prices from Pyth\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core-v3/misc/AaveOracle.sol\":\"AaveOracle\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/core-v3/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\r\\n\\r\\n/**\\r\\n * @title IACLManager\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for the ACL Manager\\r\\n */\\r\\ninterface IACLManager {\\r\\n  /**\\r\\n   * @notice Returns the contract address of the PoolAddressesProvider\\r\\n   * @return The address of the PoolAddressesProvider\\r\\n   */\\r\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the PoolAdmin role\\r\\n   * @return The id of the PoolAdmin role\\r\\n   */\\r\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the EmergencyAdmin role\\r\\n   * @return The id of the EmergencyAdmin role\\r\\n   */\\r\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the RiskAdmin role\\r\\n   * @return The id of the RiskAdmin role\\r\\n   */\\r\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the FlashBorrower role\\r\\n   * @return The id of the FlashBorrower role\\r\\n   */\\r\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the Bridge role\\r\\n   * @return The id of the Bridge role\\r\\n   */\\r\\n  function BRIDGE_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the identifier of the AssetListingAdmin role\\r\\n   * @return The id of the AssetListingAdmin role\\r\\n   */\\r\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @notice Set the role as admin of a specific role.\\r\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\r\\n   * @param role The role to be managed by the admin role\\r\\n   * @param adminRole The admin role\\r\\n   */\\r\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as PoolAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addPoolAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as PoolAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removePoolAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is PoolAdmin, false otherwise\\r\\n   */\\r\\n  function isPoolAdmin(address admin) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as EmergencyAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addEmergencyAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as EmergencyAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removeEmergencyAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\r\\n   */\\r\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as RiskAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addRiskAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as RiskAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removeRiskAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is RiskAdmin, false otherwise\\r\\n   */\\r\\n  function isRiskAdmin(address admin) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new address as FlashBorrower\\r\\n   * @param borrower The address of the new FlashBorrower\\r\\n   */\\r\\n  function addFlashBorrower(address borrower) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an address as FlashBorrower\\r\\n   * @param borrower The address of the FlashBorrower to remove\\r\\n   */\\r\\n  function removeFlashBorrower(address borrower) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\r\\n   * @param borrower The address to check\\r\\n   * @return True if the given address is FlashBorrower, false otherwise\\r\\n   */\\r\\n  function isFlashBorrower(address borrower) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new address as Bridge\\r\\n   * @param bridge The address of the new Bridge\\r\\n   */\\r\\n  function addBridge(address bridge) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an address as Bridge\\r\\n   * @param bridge The address of the bridge to remove\\r\\n   */\\r\\n  function removeBridge(address bridge) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is Bridge, false otherwise\\r\\n   * @param bridge The address to check\\r\\n   * @return True if the given address is Bridge, false otherwise\\r\\n   */\\r\\n  function isBridge(address bridge) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a new admin as AssetListingAdmin\\r\\n   * @param admin The address of the new admin\\r\\n   */\\r\\n  function addAssetListingAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes an admin as AssetListingAdmin\\r\\n   * @param admin The address of the admin to remove\\r\\n   */\\r\\n  function removeAssetListingAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\r\\n   * @param admin The address to check\\r\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\r\\n   */\\r\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x518142961e1f7c74c9709585287a5dd698874a6db42f7155c2e6564e313888bb\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPriceOracleGetter} from \\\"./IPriceOracleGetter.sol\\\";\\r\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IAaveOracle\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for the Aave Oracle\\r\\n */\\r\\ninterface IAaveOracle is IPriceOracleGetter {\\r\\n    /**\\r\\n     * @dev Emitted after the base currency is set\\r\\n     * @param baseCurrency The base currency of used for price quotes\\r\\n     * @param baseCurrencyUnit The unit of the base currency\\r\\n     */\\r\\n    event BaseCurrencySet(\\r\\n        address indexed baseCurrency,\\r\\n        uint256 baseCurrencyUnit\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted after the price source of an asset is updated\\r\\n     * @param asset The address of the asset\\r\\n     * @param source The price source of the asset\\r\\n     */\\r\\n    event AssetSourceUpdated(address indexed asset, bytes32 indexed source);\\r\\n\\r\\n    // /**\\r\\n    //  * @dev Emitted after the address of fallback oracle is updated\\r\\n    //  * @param fallbackOracle The address of the fallback oracle\\r\\n    //  */\\r\\n    // event FallbackOracleUpdated(address indexed fallbackOracle);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the PoolAddressesProvider\\r\\n     * @return The address of the PoolAddressesProvider contract\\r\\n     */\\r\\n    function ADDRESSES_PROVIDER()\\r\\n        external\\r\\n        view\\r\\n        returns (IPoolAddressesProvider);\\r\\n\\r\\n    // /**\\r\\n    //  * @notice Sets or replaces price sources of assets\\r\\n    //  * @param assets The addresses of the assets\\r\\n    //  * @param sources The addresses of the price sources\\r\\n    //  */\\r\\n    // // function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\r\\n\\r\\n    // /**\\r\\n    //  * @notice Sets the fallback oracle\\r\\n    //  * @param fallbackOracle The address of the fallback oracle\\r\\n    //  */\\r\\n    // function setFallbackOracle(address fallbackOracle) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(\\r\\n        address[] calldata assets\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the fallback oracle\\r\\n     * @return The address of the fallback oracle\\r\\n     */\\r\\n    // function getFallbackOracle() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x57ce9715fa946e8c6457d20f4f3b37db23aee7d5efe0512cfd182eee5f07f0fe\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n */\\r\\ninterface IPoolAddressesProvider {\\r\\n  /**\\r\\n   * @dev Emitted when the market identifier is updated.\\r\\n   * @param oldMarketId The old id of the market\\r\\n   * @param newMarketId The new id of the market\\r\\n   */\\r\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool is updated.\\r\\n   * @param oldAddress The old address of the Pool\\r\\n   * @param newAddress The new address of the Pool\\r\\n   */\\r\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool configurator is updated.\\r\\n   * @param oldAddress The old address of the PoolConfigurator\\r\\n   * @param newAddress The new address of the PoolConfigurator\\r\\n   */\\r\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle is updated.\\r\\n   * @param oldAddress The old address of the PriceOracle\\r\\n   * @param newAddress The new address of the PriceOracle\\r\\n   */\\r\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL manager is updated.\\r\\n   * @param oldAddress The old address of the ACLManager\\r\\n   * @param newAddress The new address of the ACLManager\\r\\n   */\\r\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL admin is updated.\\r\\n   * @param oldAddress The old address of the ACLAdmin\\r\\n   * @param newAddress The new address of the ACLAdmin\\r\\n   */\\r\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle sentinel is updated.\\r\\n   * @param oldAddress The old address of the PriceOracleSentinel\\r\\n   * @param newAddress The new address of the PriceOracleSentinel\\r\\n   */\\r\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool data provider is updated.\\r\\n   * @param oldAddress The old address of the PoolDataProvider\\r\\n   * @param newAddress The new address of the PoolDataProvider\\r\\n   */\\r\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new proxy is created.\\r\\n   * @param id The identifier of the proxy\\r\\n   * @param proxyAddress The address of the created proxy contract\\r\\n   * @param implementationAddress The address of the implementation contract\\r\\n   */\\r\\n  event ProxyCreated(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address indexed implementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new non-proxied contract address is registered.\\r\\n   * @param id The identifier of the contract\\r\\n   * @param oldAddress The address of the old contract\\r\\n   * @param newAddress The address of the new contract\\r\\n   */\\r\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n   * @param id The identifier of the contract\\r\\n   * @param proxyAddress The address of the proxy contract\\r\\n   * @param oldImplementationAddress The address of the old implementation contract\\r\\n   * @param newImplementationAddress The address of the new implementation contract\\r\\n   */\\r\\n  event AddressSetAsProxy(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address oldImplementationAddress,\\r\\n    address indexed newImplementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id of the Aave market to which this contract points to.\\r\\n   * @return The market id\\r\\n   */\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n   * identify and validate multiple Aave markets.\\r\\n   * @param newMarketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns an address by its identifier.\\r\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n   * @dev It returns ZERO if there is no registered address with the given id\\r\\n   * @param id The id\\r\\n   * @return The address of the registered for the specified id\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `newImplementationAddress`.\\r\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param newImplementationAddress The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Pool proxy.\\r\\n   * @return The Pool proxy address\\r\\n   */\\r\\n  function getPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n   * setting the new `pool` implementation when the function is called for the first time.\\r\\n   * @param newPoolImpl The new Pool implementation\\r\\n   */\\r\\n  function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the PoolConfigurator proxy.\\r\\n   * @return The PoolConfigurator proxy address\\r\\n   */\\r\\n  function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n   */\\r\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle.\\r\\n   * @return The address of the PriceOracle\\r\\n   */\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle.\\r\\n   * @param newPriceOracle The address of the new PriceOracle\\r\\n   */\\r\\n  function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL manager.\\r\\n   * @return The address of the ACLManager\\r\\n   */\\r\\n  function getACLManager() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL manager.\\r\\n   * @param newAclManager The address of the new ACLManager\\r\\n   */\\r\\n  function setACLManager(address newAclManager) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL admin.\\r\\n   * @return The address of the ACL admin\\r\\n   */\\r\\n  function getACLAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL admin.\\r\\n   * @param newAclAdmin The address of the new ACL admin\\r\\n   */\\r\\n  function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle sentinel.\\r\\n   * @return The address of the PriceOracleSentinel\\r\\n   */\\r\\n  function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle sentinel.\\r\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n   */\\r\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the data provider.\\r\\n   * @return The address of the DataProvider\\r\\n   */\\r\\n  function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the data provider.\\r\\n   * @param newDataProvider The address of the new DataProvider\\r\\n   */\\r\\n  function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf37b9fdb389d45783acfc16664c06f28af953d4a409d1059bdf10b917d41fd4a\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPriceOracleGetter\\r\\n * @author Aave\\r\\n * @notice Interface for the Aave price oracle.\\r\\n */\\r\\ninterface IPriceOracleGetter {\\r\\n  /**\\r\\n   * @notice Returns the base currency address\\r\\n   * @dev Address 0x0 is reserved for USD as base currency.\\r\\n   * @return Returns the base currency address.\\r\\n   */\\r\\n  function BASE_CURRENCY() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the base currency unit\\r\\n   * @dev 1 ether for ETH, 1e8 for USD.\\r\\n   * @return Returns the base currency unit.\\r\\n   */\\r\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the asset price in the base currency\\r\\n   * @param asset The address of the asset\\r\\n   * @return The price of the asset\\r\\n   */\\r\\n  function getAssetPrice(address asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xfda8ee40f53d3c0ca7a7d28a7773fe2ec52ce73d206c53103df935188da0064c\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/misc/AaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\r\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\r\\nimport {Errors} from \\\"../protocol/libraries/helpers/Errors.sol\\\";\\r\\nimport {IACLManager} from \\\"../interfaces/IACLManager.sol\\\";\\r\\nimport {IPoolAddressesProvider} from \\\"../interfaces/IPoolAddressesProvider.sol\\\";\\r\\nimport {IPriceOracleGetter} from \\\"../interfaces/IPriceOracleGetter.sol\\\";\\r\\nimport {IAaveOracle} from \\\"../interfaces/IAaveOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AaveOracle\\r\\n * @notice Contract to fetch asset prices from Pyth\\r\\n */\\r\\ncontract AaveOracle is IAaveOracle {\\r\\n    IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\r\\n\\r\\n    // Map of asset price feed IDs (asset => Pyth price feed ID)\\r\\n    mapping(address => bytes32) private priceFeedIds;\\r\\n\\r\\n    IPyth public immutable pyth;\\r\\n    // IPriceOracleGetter private _fallbackOracle;\\r\\n    address public immutable override BASE_CURRENCY;\\r\\n    uint256 public immutable override BASE_CURRENCY_UNIT;\\r\\n\\r\\n    /**\\r\\n     * @dev Only asset listing or pool admin can call functions marked by this modifier.\\r\\n     */\\r\\n    modifier onlyAssetListingOrPoolAdmins() {\\r\\n        _onlyAssetListingOrPoolAdmins();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param provider The address of the PoolAddressesProvider\\r\\n     * @param _pythAddress The address of the Pyth contract\\r\\n     * @param assets The addresses of the assets\\r\\n   * @param sources The address of the source of each asset\\r\\n   \\r\\n     * @param baseCurrency The base currency used for the price quotes\\r\\n     * @param baseCurrencyUnit The unit of the base currency\\r\\n     */\\r\\n    constructor(\\r\\n        IPoolAddressesProvider provider,\\r\\n        address _pythAddress,\\r\\n        address[] memory assets,\\r\\n        bytes32[] memory sources,\\r\\n        address baseCurrency,\\r\\n        uint256 baseCurrencyUnit\\r\\n    ) {\\r\\n        ADDRESSES_PROVIDER = provider;\\r\\n        pyth = IPyth(_pythAddress);\\r\\n        _setAssetsSources(assets, sources);\\r\\n        BASE_CURRENCY = baseCurrency;\\r\\n        BASE_CURRENCY_UNIT = baseCurrencyUnit;\\r\\n        emit BaseCurrencySet(baseCurrency, baseCurrencyUnit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the Pyth price feed ID for an asset\\r\\n     * @param assets The address of the asset\\r\\n     * @param feedIds The Pyth price feed ID for the asset\\r\\n     */\\r\\n    function setPriceFeedIds(\\r\\n        address[] calldata assets,\\r\\n        bytes32[] calldata feedIds\\r\\n    ) external onlyAssetListingOrPoolAdmins {\\r\\n        _setAssetsSources(assets, feedIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to set the sources for each asset\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The address of the source of each asset\\r\\n     */\\r\\n    function _setAssetsSources(\\r\\n        address[] memory assets,\\r\\n        bytes32[] memory sources\\r\\n    ) internal {\\r\\n        require(\\r\\n            assets.length == sources.length,\\r\\n            Errors.INCONSISTENT_PARAMS_LENGTH\\r\\n        );\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            priceFeedIds[assets[i]] = sources[i];\\r\\n            emit AssetSourceUpdated(assets[i], sources[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IPriceOracleGetter\\r\\n    function getAssetPrice(\\r\\n        address asset\\r\\n    ) public view override returns (uint256) {\\r\\n        bytes32 feedId = priceFeedIds[asset];\\r\\n\\r\\n        if (asset == BASE_CURRENCY) {\\r\\n            return BASE_CURRENCY_UNIT;\\r\\n        } else {\\r\\n            // Should use it for mainnet\\r\\n            // PythStructs.Price memory price = pyth.getPriceNoOlderThan(\\r\\n            //     feedId,\\r\\n            //     60\\r\\n            // );\\r\\n            PythStructs.Price memory price = pyth.getPriceUnsafe(feedId);\\r\\n            require(price.price > 0, \\\"Invalid Pyth price\\\");\\r\\n            return uint256(uint64(price.price));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAaveOracle\\r\\n    function getAssetsPrices(\\r\\n        address[] calldata assets\\r\\n    ) external view override returns (uint256[] memory) {\\r\\n        uint256[] memory prices = new uint256[](assets.length);\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            prices[i] = getAssetPrice(assets[i]);\\r\\n        }\\r\\n        return prices;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAaveOracle\\r\\n    function getSourceOfAsset(\\r\\n        address asset\\r\\n    ) external view override returns (bytes32) {\\r\\n        return priceFeedIds[asset];\\r\\n    }\\r\\n\\r\\n    function _onlyAssetListingOrPoolAdmins() internal view {\\r\\n        IACLManager aclManager = IACLManager(\\r\\n            ADDRESSES_PROVIDER.getACLManager()\\r\\n        );\\r\\n        require(\\r\\n            aclManager.isAssetListingAdmin(msg.sender) ||\\r\\n                aclManager.isPoolAdmin(msg.sender),\\r\\n            Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x89043203ce4a38054a6aa381e8ad9a7e917771af01a87b4d2af2046b58270248\",\"license\":\"BUSL-1.1\"},\"contracts/core-v3/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aave\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\r\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\r\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\r\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\r\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\r\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\r\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\r\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\r\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\r\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\r\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\r\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\r\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\r\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\r\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\r\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\r\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\r\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\r\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\r\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\r\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\r\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\r\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\r\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\r\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\r\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\r\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\r\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\r\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\r\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\r\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\r\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\r\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\r\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\r\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\r\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\r\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\r\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\r\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\r\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\r\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\r\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\r\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\r\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\r\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\r\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\r\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\r\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\r\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\r\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\r\\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'\\r\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\r\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\r\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\r\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\r\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\r\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\r\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\r\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\r\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\r\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\r\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\r\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\r\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\r\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\r\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\r\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\r\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\r\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\r\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\r\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\r\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\r\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\r\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\r\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\r\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\r\\n}\\r\\n\",\"keccak256\":\"0xb6227b2cd999d01882dcfa20f489bf7b95d7428120253da7833c3361d2c8865d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063b3596f071161005b578063b3596f0714610169578063b6a9f5d31461017c578063e19f470014610191578063f98d06f0146101b857600080fd5b80630542975c1461008d5780638c89b64f146100de57806392bf2be0146101135780639d23d9f214610149575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101057f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100d5565b610105610121366004610897565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61015c610157366004610907565b6101df565b6040516100d59190610949565b610105610177366004610897565b610294565b61018f61018a36600461098d565b61044d565b005b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b606060008267ffffffffffffffff8111156101fc576101fc6109f9565b604051908082528060200260200182016040528015610225578160200160208202803683370190505b50905060005b8381101561028c5761025d85858381811061024857610248610a28565b90506020020160208101906101779190610897565b82828151811061026f5761026f610a28565b60209081029190910101528061028481610a57565b91505061022b565b509392505050565b73ffffffffffffffffffffffffffffffffffffffff808216600081815260208190526040812054909290917f0000000000000000000000000000000000000000000000000000000000000000909116141561031157507f000000000000000000000000000000000000000000000000000000000000000092915050565b6040517f96834ad3000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906396834ad390602401608060405180830381865afa15801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190610ae6565b90506000816000015160070b1361043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642050797468207072696365000000000000000000000000000060448201526064015b60405180910390fd5b5167ffffffffffffffff169392505050565b6104556104c8565b6104c2848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506106f092505050565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190610b8f565b6040517f13ee32e000000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906313ee32e090602401602060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610bac565b8061067e57506040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190610bac565b6040518060400160405280600181526020017f3500000000000000000000000000000000000000000000000000000000000000815250906106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104329190610bce565b5050565b80518251146040518060400160405280600281526020017f373600000000000000000000000000000000000000000000000000000000000081525090610763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104329190610bce565b5060005b825181101561086d5781818151811061078257610782610a28565b602002602001015160008085848151811061079f5761079f610a28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508181815181106107f7576107f7610a28565b602002602001015183828151811061081157610811610a28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167fdcb94a871091cc58901744f251f3df654c2e3c2a5745ed991e2e2457255324b960405160405180910390a38061086581610a57565b915050610767565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089457600080fd5b50565b6000602082840312156108a957600080fd5b81356108b481610872565b9392505050565b60008083601f8401126108cd57600080fd5b50813567ffffffffffffffff8111156108e557600080fd5b6020830191508360208260051b850101111561090057600080fd5b9250929050565b6000806020838503121561091a57600080fd5b823567ffffffffffffffff81111561093157600080fd5b61093d858286016108bb565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561098157835183529284019291840191600101610965565b50909695505050505050565b600080600080604085870312156109a357600080fd5b843567ffffffffffffffff808211156109bb57600080fd5b6109c7888389016108bb565b909650945060208701359150808211156109e057600080fd5b506109ed878288016108bb565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ab0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b805167ffffffffffffffff81168114610acf57600080fd5b919050565b8051600381900b8114610acf57600080fd5b600060808284031215610af857600080fd5b6040516080810181811067ffffffffffffffff82111715610b42577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251600781900b8114610b5757600080fd5b8152610b6560208401610ab7565b6020820152610b7660408401610ad4565b6040820152606083015160608201528091505092915050565b600060208284031215610ba157600080fd5b81516108b481610872565b600060208284031215610bbe57600080fd5b815180151581146108b457600080fd5b600060208083528351808285015260005b81811015610bfb57858101830151858201604001528201610bdf565b81811115610c0d576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea264697066735822122093c462546925e6ca2875ad8bde2f0cbc88ead3d8d4d08c26f5eab1e95ec47a4064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_pythAddress": "The address of the Pyth contract",
          "assets": "The addresses of the assets",
          "baseCurrency": "The base currency used for the price quotes",
          "baseCurrencyUnit": "The unit of the base currency",
          "provider": "The address of the PoolAddressesProvider",
          "sources": "The address of the source of each asset"
        }
      },
      "getAssetPrice(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The price of the asset"
        }
      },
      "getAssetsPrices(address[])": {
        "params": {
          "assets": "The list of assets addresses"
        },
        "returns": {
          "_0": "The prices of the given assets"
        }
      },
      "getSourceOfAsset(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The address of the source"
        }
      },
      "setPriceFeedIds(address[],bytes32[])": {
        "params": {
          "assets": "The address of the asset",
          "feedIds": "The Pyth price feed ID for the asset"
        }
      }
    },
    "stateVariables": {
      "ADDRESSES_PROVIDER": {
        "return": "The address of the PoolAddressesProvider contract",
        "returns": {
          "_0": "The address of the PoolAddressesProvider contract"
        }
      },
      "BASE_CURRENCY": {
        "details": "Address 0x0 is reserved for USD as base currency.",
        "return": "Returns the base currency address.",
        "returns": {
          "_0": "Returns the base currency address."
        }
      },
      "BASE_CURRENCY_UNIT": {
        "details": "1 ether for ETH, 1e8 for USD.",
        "return": "Returns the base currency unit.",
        "returns": {
          "_0": "Returns the base currency unit."
        }
      }
    },
    "title": "AaveOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the PoolAddressesProvider"
      },
      "BASE_CURRENCY()": {
        "notice": "Returns the base currency address"
      },
      "BASE_CURRENCY_UNIT()": {
        "notice": "Returns the base currency unit"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "getAssetPrice(address)": {
        "notice": "Returns the asset price in the base currency"
      },
      "getAssetsPrices(address[])": {
        "notice": "Returns a list of prices from a list of assets addresses"
      },
      "getSourceOfAsset(address)": {
        "notice": "Returns the address of the source for an asset address"
      },
      "setPriceFeedIds(address[],bytes32[])": {
        "notice": "Sets the Pyth price feed ID for an asset"
      }
    },
    "notice": "Contract to fetch asset prices from Pyth",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6546,
        "contract": "contracts/core-v3/misc/AaveOracle.sol:AaveOracle",
        "label": "priceFeedIds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}
