{
  "address": "0xCAde81E23eB4B2d6499ED3E825b57880aAb1F73D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "optimalUsageRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseVariableBorrowRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableRateSlope1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "variableRateSlope2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableRateSlope1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableRateSlope2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseStableRateOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stableRateExcessOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optimalStableToTotalDebtRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EXCESS_USAGE_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMAL_USAGE_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unbacked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityTaken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStableDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalVariableDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageStableBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "reserve",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aToken",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.CalculateInterestRatesParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "calculateInterestRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseStableBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseVariableBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxVariableBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableRateExcessOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableRateSlope1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableRateSlope2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVariableRateSlope1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVariableRateSlope2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d3578e0bcfb9a75dbd4968b9195e4275b98f6deb4088625bfa76f090b66e6fd",
  "receipt": {
    "to": null,
    "from": "0x4Aa6Da4ca5d76e8d5e3ACD11B92Ab22D564F1fcb",
    "contractAddress": "0xCAde81E23eB4B2d6499ED3E825b57880aAb1F73D",
    "transactionIndex": 4,
    "gasUsed": "1012943",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd7a69cae1dee4c696ad6cd20ae964c65eda48afcce8777774881757ec4c4ec3a",
    "transactionHash": "0x0d3578e0bcfb9a75dbd4968b9195e4275b98f6deb4088625bfa76f090b66e6fd",
    "logs": [],
    "blockNumber": 108647239,
    "cumulativeGasUsed": "1617212",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc0d03D8249eD557aB1c54f46d0dc13a0C0678f25",
    "800000000000000000000000000",
    "0",
    "40000000000000000000000000",
    "750000000000000000000000000",
    "20000000000000000000000000",
    "750000000000000000000000000",
    "20000000000000000000000000",
    "50000000000000000000000000",
    "200000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "1eaa4365c44e38f8790053afb1c34d22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optimalUsageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStableRateOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateExcessOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimalStableToTotalDebtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EXCESS_USAGE_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMAL_USAGE_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unbacked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.CalculateInterestRatesParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseStableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableRateExcessOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVariableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVariableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"details\":\"The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO` point of usage and another from that one to 100%. - An instance of this same contract, can't be used across different Aave markets, due to the caching   of the PoolAddressesProvider\",\"kind\":\"dev\",\"methods\":{\"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address))\":{\"params\":{\"params\":\"The parameters needed to calculate interest rates\"},\"returns\":{\"_0\":\"liquidityRate The liquidity rate expressed in rays\",\"_1\":\"stableBorrowRate The stable borrow rate expressed in rays\",\"_2\":\"variableBorrowRate The variable borrow rate expressed in rays\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"baseStableRateOffset\":\"The premium on top of variable rate for base stable borrowing rate\",\"baseVariableBorrowRate\":\"The base variable borrow rate\",\"optimalStableToTotalDebtRatio\":\"The optimal stable debt to total debt ratio of the reserve\",\"optimalUsageRatio\":\"The optimal usage ratio\",\"provider\":\"The address of the PoolAddressesProvider contract\",\"stableRateExcessOffset\":\"The premium on top of stable rate when there stable debt surpass the threshold\",\"stableRateSlope1\":\"The stable rate slope below optimal usage ratio\",\"stableRateSlope2\":\"The stable rate slope above optimal usage ratio\",\"variableRateSlope1\":\"The variable rate slope below optimal usage ratio\",\"variableRateSlope2\":\"The variable rate slope above optimal usage ratio\"}},\"getBaseStableBorrowRate()\":{\"returns\":{\"_0\":\"The base stable borrow rate, expressed in ray\"}},\"getBaseVariableBorrowRate()\":{\"returns\":{\"_0\":\"The base variable borrow rate, expressed in ray\"}},\"getMaxVariableBorrowRate()\":{\"returns\":{\"_0\":\"The maximum variable borrow rate, expressed in ray\"}},\"getStableRateExcessOffset()\":{\"details\":\"It's an additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\",\"returns\":{\"_0\":\"The stable rate excess offset, expressed in ray\"}},\"getStableRateSlope1()\":{\"details\":\"It's the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\",\"returns\":{\"_0\":\"The stable rate slope, expressed in ray\"}},\"getStableRateSlope2()\":{\"details\":\"It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\",\"returns\":{\"_0\":\"The stable rate slope, expressed in ray\"}},\"getVariableRateSlope1()\":{\"details\":\"It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\",\"returns\":{\"_0\":\"The variable rate slope, expressed in ray\"}},\"getVariableRateSlope2()\":{\"details\":\"It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\",\"returns\":{\"_0\":\"The variable rate slope, expressed in ray\"}}},\"stateVariables\":{\"ADDRESSES_PROVIDER\":{\"return\":\"The address of the PoolAddressesProvider contract\",\"returns\":{\"_0\":\"The address of the PoolAddressesProvider contract\"}},\"MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO\":{\"details\":\"It's always equal to 1-optimal stable to total debt ratio (added as constant for gas optimizations)\",\"return\":\"The max excess stable to total debt ratio, expressed in ray.\",\"returns\":{\"_0\":\"The max excess stable to total debt ratio, expressed in ray.\"}},\"MAX_EXCESS_USAGE_RATIO\":{\"details\":\"It's always equal to 1-optimal usage ratio (added as constant for gas optimizations)\",\"return\":\"The max excess usage ratio, expressed in ray.\",\"returns\":{\"_0\":\"The max excess usage ratio, expressed in ray.\"}},\"OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\":{\"return\":\"The optimal stable to total debt ratio, expressed in ray.\",\"returns\":{\"_0\":\"The optimal stable to total debt ratio, expressed in ray.\"}},\"OPTIMAL_USAGE_RATIO\":{\"return\":\"The optimal usage ratio, expressed in ray.\",\"returns\":{\"_0\":\"The optimal usage ratio, expressed in ray.\"}}},\"title\":\"DefaultReserveInterestRateStrategy contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the address of the PoolAddressesProvider\"},\"MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO()\":{\"notice\":\"Returns the excess stable debt ratio above the optimal.\"},\"MAX_EXCESS_USAGE_RATIO()\":{\"notice\":\"Returns the excess usage ratio above the optimal.\"},\"OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO()\":{\"notice\":\"Returns the optimal stable to total debt ratio of the reserve.\"},\"OPTIMAL_USAGE_RATIO()\":{\"notice\":\"Returns the usage ratio at which the pool aims to obtain most competitive borrow rates.\"},\"calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address))\":{\"notice\":\"Calculates the interest rates depending on the reserve's state and configurations\"},\"getBaseStableBorrowRate()\":{\"notice\":\"Returns the base stable borrow rate\"},\"getBaseVariableBorrowRate()\":{\"notice\":\"Returns the base variable borrow rate\"},\"getMaxVariableBorrowRate()\":{\"notice\":\"Returns the maximum variable borrow rate\"},\"getStableRateExcessOffset()\":{\"notice\":\"Returns the stable rate excess offset\"},\"getStableRateSlope1()\":{\"notice\":\"Returns the stable rate slope below optimal usage ratio\"},\"getStableRateSlope2()\":{\"notice\":\"Returns the stable rate slope above optimal usage ratio\"},\"getVariableRateSlope1()\":{\"notice\":\"Returns the variable rate slope below optimal usage ratio\"},\"getVariableRateSlope2()\":{\"notice\":\"Returns the variable rate slope above optimal usage ratio\"}},\"notice\":\"Implements the calculation of the interest rates depending on the reserve state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core-v3/protocol/pool/DefaultReserveInterestRateStrategy.sol\":\"DefaultReserveInterestRateStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/core-v3/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x07fe55e38757b195c884a8ede60deb8a1f6a85cc607e4e112a8c0004a9ebd448\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/interfaces/IDefaultInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IReserveInterestRateStrategy} from './IReserveInterestRateStrategy.sol';\\r\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\r\\n\\r\\n/**\\r\\n * @title IDefaultInterestRateStrategy\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface of the DefaultReserveInterestRateStrategy\\r\\n */\\r\\ninterface IDefaultInterestRateStrategy is IReserveInterestRateStrategy {\\r\\n  /**\\r\\n   * @notice Returns the usage ratio at which the pool aims to obtain most competitive borrow rates.\\r\\n   * @return The optimal usage ratio, expressed in ray.\\r\\n   */\\r\\n  function OPTIMAL_USAGE_RATIO() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the optimal stable to total debt ratio of the reserve.\\r\\n   * @return The optimal stable to total debt ratio, expressed in ray.\\r\\n   */\\r\\n  function OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the excess usage ratio above the optimal.\\r\\n   * @dev It's always equal to 1-optimal usage ratio (added as constant for gas optimizations)\\r\\n   * @return The max excess usage ratio, expressed in ray.\\r\\n   */\\r\\n  function MAX_EXCESS_USAGE_RATIO() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the excess stable debt ratio above the optimal.\\r\\n   * @dev It's always equal to 1-optimal stable to total debt ratio (added as constant for gas optimizations)\\r\\n   * @return The max excess stable to total debt ratio, expressed in ray.\\r\\n   */\\r\\n  function MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the PoolAddressesProvider\\r\\n   * @return The address of the PoolAddressesProvider contract\\r\\n   */\\r\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the variable rate slope below optimal usage ratio\\r\\n   * @dev It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\\r\\n   * @return The variable rate slope, expressed in ray\\r\\n   */\\r\\n  function getVariableRateSlope1() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the variable rate slope above optimal usage ratio\\r\\n   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\\r\\n   * @return The variable rate slope, expressed in ray\\r\\n   */\\r\\n  function getVariableRateSlope2() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the stable rate slope below optimal usage ratio\\r\\n   * @dev It's the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\\r\\n   * @return The stable rate slope, expressed in ray\\r\\n   */\\r\\n  function getStableRateSlope1() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the stable rate slope above optimal usage ratio\\r\\n   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\\r\\n   * @return The stable rate slope, expressed in ray\\r\\n   */\\r\\n  function getStableRateSlope2() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the stable rate excess offset\\r\\n   * @dev It's an additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\\r\\n   * @return The stable rate excess offset, expressed in ray\\r\\n   */\\r\\n  function getStableRateExcessOffset() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the base stable borrow rate\\r\\n   * @return The base stable borrow rate, expressed in ray\\r\\n   */\\r\\n  function getBaseStableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the base variable borrow rate\\r\\n   * @return The base variable borrow rate, expressed in ray\\r\\n   */\\r\\n  function getBaseVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the maximum variable borrow rate\\r\\n   * @return The maximum variable borrow rate, expressed in ray\\r\\n   */\\r\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xab65e49afbcf7ed04c5e46dc66380916259a37f65acefdd9e868288f9a50a18b\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n */\\r\\ninterface IPoolAddressesProvider {\\r\\n  /**\\r\\n   * @dev Emitted when the market identifier is updated.\\r\\n   * @param oldMarketId The old id of the market\\r\\n   * @param newMarketId The new id of the market\\r\\n   */\\r\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool is updated.\\r\\n   * @param oldAddress The old address of the Pool\\r\\n   * @param newAddress The new address of the Pool\\r\\n   */\\r\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool configurator is updated.\\r\\n   * @param oldAddress The old address of the PoolConfigurator\\r\\n   * @param newAddress The new address of the PoolConfigurator\\r\\n   */\\r\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle is updated.\\r\\n   * @param oldAddress The old address of the PriceOracle\\r\\n   * @param newAddress The new address of the PriceOracle\\r\\n   */\\r\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL manager is updated.\\r\\n   * @param oldAddress The old address of the ACLManager\\r\\n   * @param newAddress The new address of the ACLManager\\r\\n   */\\r\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL admin is updated.\\r\\n   * @param oldAddress The old address of the ACLAdmin\\r\\n   * @param newAddress The new address of the ACLAdmin\\r\\n   */\\r\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle sentinel is updated.\\r\\n   * @param oldAddress The old address of the PriceOracleSentinel\\r\\n   * @param newAddress The new address of the PriceOracleSentinel\\r\\n   */\\r\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool data provider is updated.\\r\\n   * @param oldAddress The old address of the PoolDataProvider\\r\\n   * @param newAddress The new address of the PoolDataProvider\\r\\n   */\\r\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new proxy is created.\\r\\n   * @param id The identifier of the proxy\\r\\n   * @param proxyAddress The address of the created proxy contract\\r\\n   * @param implementationAddress The address of the implementation contract\\r\\n   */\\r\\n  event ProxyCreated(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address indexed implementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new non-proxied contract address is registered.\\r\\n   * @param id The identifier of the contract\\r\\n   * @param oldAddress The address of the old contract\\r\\n   * @param newAddress The address of the new contract\\r\\n   */\\r\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n   * @param id The identifier of the contract\\r\\n   * @param proxyAddress The address of the proxy contract\\r\\n   * @param oldImplementationAddress The address of the old implementation contract\\r\\n   * @param newImplementationAddress The address of the new implementation contract\\r\\n   */\\r\\n  event AddressSetAsProxy(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address oldImplementationAddress,\\r\\n    address indexed newImplementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id of the Aave market to which this contract points to.\\r\\n   * @return The market id\\r\\n   */\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n   * identify and validate multiple Aave markets.\\r\\n   * @param newMarketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns an address by its identifier.\\r\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n   * @dev It returns ZERO if there is no registered address with the given id\\r\\n   * @param id The id\\r\\n   * @return The address of the registered for the specified id\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `newImplementationAddress`.\\r\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param newImplementationAddress The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Pool proxy.\\r\\n   * @return The Pool proxy address\\r\\n   */\\r\\n  function getPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n   * setting the new `pool` implementation when the function is called for the first time.\\r\\n   * @param newPoolImpl The new Pool implementation\\r\\n   */\\r\\n  function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the PoolConfigurator proxy.\\r\\n   * @return The PoolConfigurator proxy address\\r\\n   */\\r\\n  function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n   */\\r\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle.\\r\\n   * @return The address of the PriceOracle\\r\\n   */\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle.\\r\\n   * @param newPriceOracle The address of the new PriceOracle\\r\\n   */\\r\\n  function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL manager.\\r\\n   * @return The address of the ACLManager\\r\\n   */\\r\\n  function getACLManager() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL manager.\\r\\n   * @param newAclManager The address of the new ACLManager\\r\\n   */\\r\\n  function setACLManager(address newAclManager) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL admin.\\r\\n   * @return The address of the ACL admin\\r\\n   */\\r\\n  function getACLAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL admin.\\r\\n   * @param newAclAdmin The address of the new ACL admin\\r\\n   */\\r\\n  function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle sentinel.\\r\\n   * @return The address of the PriceOracleSentinel\\r\\n   */\\r\\n  function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle sentinel.\\r\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n   */\\r\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the data provider.\\r\\n   * @return The address of the DataProvider\\r\\n   */\\r\\n  function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the data provider.\\r\\n   * @param newDataProvider The address of the new DataProvider\\r\\n   */\\r\\n  function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf37b9fdb389d45783acfc16664c06f28af953d4a409d1059bdf10b917d41fd4a\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title IReserveInterestRateStrategy\\r\\n * @author Aave\\r\\n * @notice Interface for the calculation of the interest rates\\r\\n */\\r\\ninterface IReserveInterestRateStrategy {\\r\\n  /**\\r\\n   * @notice Calculates the interest rates depending on the reserve's state and configurations\\r\\n   * @param params The parameters needed to calculate interest rates\\r\\n   * @return liquidityRate The liquidity rate expressed in rays\\r\\n   * @return stableBorrowRate The stable borrow rate expressed in rays\\r\\n   * @return variableBorrowRate The variable borrow rate expressed in rays\\r\\n   */\\r\\n  function calculateInterestRates(\\r\\n    DataTypes.CalculateInterestRatesParams memory params\\r\\n  ) external view returns (uint256, uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x70d69671d225d8aecd556386728c2e172ef44ae24e2b718f333880f783983c7d\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aave\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\r\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\r\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\r\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\r\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\r\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\r\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\r\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\r\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\r\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\r\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\r\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\r\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\r\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\r\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\r\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\r\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\r\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\r\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\r\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\r\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\r\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\r\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\r\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\r\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\r\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\r\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\r\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\r\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\r\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\r\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\r\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\r\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\r\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\r\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\r\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\r\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\r\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\r\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\r\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\r\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\r\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\r\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\r\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\r\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\r\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\r\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\r\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\r\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\r\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\r\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\r\\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'\\r\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\r\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\r\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\r\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\r\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\r\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\r\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\r\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\r\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\r\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\r\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\r\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\r\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\r\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\r\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\r\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\r\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\r\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\r\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\r\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\r\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\r\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\r\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\r\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\r\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\r\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\r\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\r\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\r\\n}\\r\\n\",\"keccak256\":\"0xb6227b2cd999d01882dcfa20f489bf7b95d7428120253da7833c3361d2c8865d\",\"license\":\"BUSL-1.1\"},\"contracts/core-v3/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title PercentageMath library\\r\\n * @author Aave\\r\\n * @notice Provides functions to perform percentage calculations\\r\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\r\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\r\\n */\\r\\nlibrary PercentageMath {\\r\\n  // Maximum percentage factor (100.00%)\\r\\n  uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\r\\n\\r\\n  // Half percentage factor (50.00%)\\r\\n  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\r\\n\\r\\n  /**\\r\\n   * @notice Executes a percentage multiplication\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return result value percentmul percentage\\r\\n   */\\r\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\r\\n    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\r\\n    assembly {\\r\\n      if iszero(\\r\\n        or(\\r\\n          iszero(percentage),\\r\\n          iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)))\\r\\n        )\\r\\n      ) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Executes a percentage division\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return result value percentdiv percentage\\r\\n   */\\r\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\r\\n    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\r\\n    assembly {\\r\\n      if or(\\r\\n        iszero(percentage),\\r\\n        iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))\\r\\n      ) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x944f4990151b34bc0b5043712922e28adc10626e51e3d02e9569609f1caa5b93\",\"license\":\"BUSL-1.1\"},\"contracts/core-v3/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @author Aave\\r\\n * @notice Provides functions to perform calculations with Wad and Ray units\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\r\\n * with 27 digits of precision)\\r\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\r\\n */\\r\\nlibrary WadRayMath {\\r\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant HALF_WAD = 0.5e18;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant HALF_RAY = 0.5e27;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return c = a*b, in wad\\r\\n   */\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\r\\n    assembly {\\r\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two wad, rounding half up to the nearest wad\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return c = a/b, in wad\\r\\n   */\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\r\\n    assembly {\\r\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return c = a raymul b\\r\\n   */\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\r\\n    assembly {\\r\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Divides two ray, rounding half up to the nearest ray\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return c = a raydiv b\\r\\n   */\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\r\\n    assembly {\\r\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Casts ray down to wad\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Ray\\r\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\r\\n   */\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\r\\n    assembly {\\r\\n      b := div(a, WAD_RAY_RATIO)\\r\\n      let remainder := mod(a, WAD_RAY_RATIO)\\r\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\r\\n        b := add(b, 1)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts wad up to ray\\r\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n   * @param a Wad\\r\\n   * @return b = a converted in ray\\r\\n   */\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\r\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\r\\n    assembly {\\r\\n      b := mul(a, WAD_RAY_RATIO)\\r\\n\\r\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1fefec0fa31e0b2960c90dd1a637b69e5748fee962d3b5e6f2f6b0b5965a67b1\",\"license\":\"BUSL-1.1\"},\"contracts/core-v3/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88\",\"license\":\"BUSL-1.1\"},\"contracts/core-v3/protocol/pool/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\\r\\nimport {PercentageMath} from '../libraries/math/PercentageMath.sol';\\r\\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\\r\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\r\\nimport {IDefaultInterestRateStrategy} from '../../interfaces/IDefaultInterestRateStrategy.sol';\\r\\nimport {IReserveInterestRateStrategy} from '../../interfaces/IReserveInterestRateStrategy.sol';\\r\\nimport {IPoolAddressesProvider} from '../../interfaces/IPoolAddressesProvider.sol';\\r\\n\\r\\n/**\\r\\n * @title DefaultReserveInterestRateStrategy contract\\r\\n * @author Aave\\r\\n * @notice Implements the calculation of the interest rates depending on the reserve state\\r\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO`\\r\\n * point of usage and another from that one to 100%.\\r\\n * - An instance of this same contract, can't be used across different Aave markets, due to the caching\\r\\n *   of the PoolAddressesProvider\\r\\n */\\r\\ncontract DefaultReserveInterestRateStrategy is IDefaultInterestRateStrategy {\\r\\n  using WadRayMath for uint256;\\r\\n  using PercentageMath for uint256;\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  uint256 public immutable OPTIMAL_USAGE_RATIO;\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  uint256 public immutable OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO;\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  uint256 public immutable MAX_EXCESS_USAGE_RATIO;\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  uint256 public immutable MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO;\\r\\n\\r\\n  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\r\\n\\r\\n  // Base variable borrow rate when usage rate = 0. Expressed in ray\\r\\n  uint256 internal immutable _baseVariableBorrowRate;\\r\\n\\r\\n  // Slope of the variable interest curve when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO. Expressed in ray\\r\\n  uint256 internal immutable _variableRateSlope1;\\r\\n\\r\\n  // Slope of the variable interest curve when usage ratio > OPTIMAL_USAGE_RATIO. Expressed in ray\\r\\n  uint256 internal immutable _variableRateSlope2;\\r\\n\\r\\n  // Slope of the stable interest curve when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO. Expressed in ray\\r\\n  uint256 internal immutable _stableRateSlope1;\\r\\n\\r\\n  // Slope of the stable interest curve when usage ratio > OPTIMAL_USAGE_RATIO. Expressed in ray\\r\\n  uint256 internal immutable _stableRateSlope2;\\r\\n\\r\\n  // Premium on top of `_variableRateSlope1` for base stable borrowing rate\\r\\n  uint256 internal immutable _baseStableRateOffset;\\r\\n\\r\\n  // Additional premium applied to stable rate when stable debt surpass `OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO`\\r\\n  uint256 internal immutable _stableRateExcessOffset;\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor.\\r\\n   * @param provider The address of the PoolAddressesProvider contract\\r\\n   * @param optimalUsageRatio The optimal usage ratio\\r\\n   * @param baseVariableBorrowRate The base variable borrow rate\\r\\n   * @param variableRateSlope1 The variable rate slope below optimal usage ratio\\r\\n   * @param variableRateSlope2 The variable rate slope above optimal usage ratio\\r\\n   * @param stableRateSlope1 The stable rate slope below optimal usage ratio\\r\\n   * @param stableRateSlope2 The stable rate slope above optimal usage ratio\\r\\n   * @param baseStableRateOffset The premium on top of variable rate for base stable borrowing rate\\r\\n   * @param stableRateExcessOffset The premium on top of stable rate when there stable debt surpass the threshold\\r\\n   * @param optimalStableToTotalDebtRatio The optimal stable debt to total debt ratio of the reserve\\r\\n   */\\r\\n  constructor(\\r\\n    IPoolAddressesProvider provider,\\r\\n    uint256 optimalUsageRatio,\\r\\n    uint256 baseVariableBorrowRate,\\r\\n    uint256 variableRateSlope1,\\r\\n    uint256 variableRateSlope2,\\r\\n    uint256 stableRateSlope1,\\r\\n    uint256 stableRateSlope2,\\r\\n    uint256 baseStableRateOffset,\\r\\n    uint256 stableRateExcessOffset,\\r\\n    uint256 optimalStableToTotalDebtRatio\\r\\n  ) {\\r\\n    require(WadRayMath.RAY >= optimalUsageRatio, Errors.INVALID_OPTIMAL_USAGE_RATIO);\\r\\n    require(\\r\\n      WadRayMath.RAY >= optimalStableToTotalDebtRatio,\\r\\n      Errors.INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\\r\\n    );\\r\\n    OPTIMAL_USAGE_RATIO = optimalUsageRatio;\\r\\n    MAX_EXCESS_USAGE_RATIO = WadRayMath.RAY - optimalUsageRatio;\\r\\n    OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = optimalStableToTotalDebtRatio;\\r\\n    MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO = WadRayMath.RAY - optimalStableToTotalDebtRatio;\\r\\n    ADDRESSES_PROVIDER = provider;\\r\\n    _baseVariableBorrowRate = baseVariableBorrowRate;\\r\\n    _variableRateSlope1 = variableRateSlope1;\\r\\n    _variableRateSlope2 = variableRateSlope2;\\r\\n    _stableRateSlope1 = stableRateSlope1;\\r\\n    _stableRateSlope2 = stableRateSlope2;\\r\\n    _baseStableRateOffset = baseStableRateOffset;\\r\\n    _stableRateExcessOffset = stableRateExcessOffset;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getVariableRateSlope1() external view returns (uint256) {\\r\\n    return _variableRateSlope1;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getVariableRateSlope2() external view returns (uint256) {\\r\\n    return _variableRateSlope2;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getStableRateSlope1() external view returns (uint256) {\\r\\n    return _stableRateSlope1;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getStableRateSlope2() external view returns (uint256) {\\r\\n    return _stableRateSlope2;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getStableRateExcessOffset() external view returns (uint256) {\\r\\n    return _stableRateExcessOffset;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getBaseStableBorrowRate() public view returns (uint256) {\\r\\n    return _variableRateSlope1 + _baseStableRateOffset;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getBaseVariableBorrowRate() external view override returns (uint256) {\\r\\n    return _baseVariableBorrowRate;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IDefaultInterestRateStrategy\\r\\n  function getMaxVariableBorrowRate() external view override returns (uint256) {\\r\\n    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;\\r\\n  }\\r\\n\\r\\n  struct CalcInterestRatesLocalVars {\\r\\n    uint256 availableLiquidity;\\r\\n    uint256 totalDebt;\\r\\n    uint256 currentVariableBorrowRate;\\r\\n    uint256 currentStableBorrowRate;\\r\\n    uint256 currentLiquidityRate;\\r\\n    uint256 borrowUsageRatio;\\r\\n    uint256 supplyUsageRatio;\\r\\n    uint256 stableToTotalDebtRatio;\\r\\n    uint256 availableLiquidityPlusDebt;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IReserveInterestRateStrategy\\r\\n  function calculateInterestRates(\\r\\n    DataTypes.CalculateInterestRatesParams memory params\\r\\n  ) public view override returns (uint256, uint256, uint256) {\\r\\n    CalcInterestRatesLocalVars memory vars;\\r\\n\\r\\n    vars.totalDebt = params.totalStableDebt + params.totalVariableDebt;\\r\\n\\r\\n    vars.currentLiquidityRate = 0;\\r\\n    vars.currentVariableBorrowRate = _baseVariableBorrowRate;\\r\\n    vars.currentStableBorrowRate = getBaseStableBorrowRate();\\r\\n\\r\\n    if (vars.totalDebt != 0) {\\r\\n      vars.stableToTotalDebtRatio = params.totalStableDebt.rayDiv(vars.totalDebt);\\r\\n      vars.availableLiquidity =\\r\\n        IERC20(params.reserve).balanceOf(params.aToken) +\\r\\n        params.liquidityAdded -\\r\\n        params.liquidityTaken;\\r\\n\\r\\n      vars.availableLiquidityPlusDebt = vars.availableLiquidity + vars.totalDebt;\\r\\n      vars.borrowUsageRatio = vars.totalDebt.rayDiv(vars.availableLiquidityPlusDebt);\\r\\n      vars.supplyUsageRatio = vars.totalDebt.rayDiv(\\r\\n        vars.availableLiquidityPlusDebt + params.unbacked\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (vars.borrowUsageRatio > OPTIMAL_USAGE_RATIO) {\\r\\n      uint256 excessBorrowUsageRatio = (vars.borrowUsageRatio - OPTIMAL_USAGE_RATIO).rayDiv(\\r\\n        MAX_EXCESS_USAGE_RATIO\\r\\n      );\\r\\n\\r\\n      vars.currentStableBorrowRate +=\\r\\n        _stableRateSlope1 +\\r\\n        _stableRateSlope2.rayMul(excessBorrowUsageRatio);\\r\\n\\r\\n      vars.currentVariableBorrowRate +=\\r\\n        _variableRateSlope1 +\\r\\n        _variableRateSlope2.rayMul(excessBorrowUsageRatio);\\r\\n    } else {\\r\\n      vars.currentStableBorrowRate += _stableRateSlope1.rayMul(vars.borrowUsageRatio).rayDiv(\\r\\n        OPTIMAL_USAGE_RATIO\\r\\n      );\\r\\n\\r\\n      vars.currentVariableBorrowRate += _variableRateSlope1.rayMul(vars.borrowUsageRatio).rayDiv(\\r\\n        OPTIMAL_USAGE_RATIO\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (vars.stableToTotalDebtRatio > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO) {\\r\\n      uint256 excessStableDebtRatio = (vars.stableToTotalDebtRatio -\\r\\n        OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO).rayDiv(MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO);\\r\\n      vars.currentStableBorrowRate += _stableRateExcessOffset.rayMul(excessStableDebtRatio);\\r\\n    }\\r\\n\\r\\n    vars.currentLiquidityRate = _getOverallBorrowRate(\\r\\n      params.totalStableDebt,\\r\\n      params.totalVariableDebt,\\r\\n      vars.currentVariableBorrowRate,\\r\\n      params.averageStableBorrowRate\\r\\n    ).rayMul(vars.supplyUsageRatio).percentMul(\\r\\n        PercentageMath.PERCENTAGE_FACTOR - params.reserveFactor\\r\\n      );\\r\\n\\r\\n    return (\\r\\n      vars.currentLiquidityRate,\\r\\n      vars.currentStableBorrowRate,\\r\\n      vars.currentVariableBorrowRate\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable\\r\\n   * debt\\r\\n   * @param totalStableDebt The total borrowed from the reserve at a stable rate\\r\\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\r\\n   * @param currentVariableBorrowRate The current variable borrow rate of the reserve\\r\\n   * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans\\r\\n   * @return The weighted averaged borrow rate\\r\\n   */\\r\\n  function _getOverallBorrowRate(\\r\\n    uint256 totalStableDebt,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 currentVariableBorrowRate,\\r\\n    uint256 currentAverageStableBorrowRate\\r\\n  ) internal pure returns (uint256) {\\r\\n    uint256 totalDebt = totalStableDebt + totalVariableDebt;\\r\\n\\r\\n    if (totalDebt == 0) return 0;\\r\\n\\r\\n    uint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);\\r\\n\\r\\n    uint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);\\r\\n\\r\\n    uint256 overallBorrowRate = (weightedVariableRate + weightedStableRate).rayDiv(\\r\\n      totalDebt.wadToRay()\\r\\n    );\\r\\n\\r\\n    return overallBorrowRate;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e3e5e5dc719efe729cc026177a791d06e10acf8700a36bf5925c4ad7a8b442c\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61020060405234801561001157600080fd5b5060405162000f7538038062000f7583398101604081905261003291610146565b886b033b2e3c9fd0803ce8000000101560405180604001604052806002815260200161383360f01b815250906100845760405162461bcd60e51b815260040161007b91906101d1565b60405180910390fd5b50806b033b2e3c9fd0803ce80000001015604051806040016040528060028152602001610e0d60f21b815250906100ce5760405162461bcd60e51b815260040161007b91906101d1565b5060808990526100ea896b033b2e3c9fd0803ce8000000610226565b60c05260a0819052610108816b033b2e3c9fd0803ce8000000610226565b60e052506001600160a01b0390981661010052610120959095526101409390935261016091909152610180526101a0526101c052506101e05261024b565b6000806000806000806000806000806101408b8d03121561016657600080fd5b8a516001600160a01b038116811461017d57600080fd5b809a505060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b600060208083528351808285015260005b818110156101fe578581018301518582016040015282016101e2565b81811115610210576000604083870101525b50601f01601f1916929092016040019392505050565b60008282101561024657634e487b7160e01b600052601160045260246000fd5b500390565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610c0d62000368600039600081816102710152610821015260006108c601526000818161017201526105ec0152600081816102970152818161061701526106ec0152600081816102bd0152818161030c0152610654015260008181610142015281816103300152818161067f0152818161075e01526108e70152600081816101980152818161035101526103fa0152600060f40152600081816102e601526107cb01526000818161024501526105900152600081816101e80152818161079a01526107ec0152600081816101c10152818161055f015281816105b1015281816106c301526107380152610c0d6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a58987091161008c578063bc62690811610066578063bc6269081461026f578063d5cd739114610295578063f4202409146102bb578063fe5fd698146102e157600080fd5b8063a589870914610212578063a9c622f814610240578063acd786861461026757600080fd5b806334762ca5116100c857806334762ca51461019657806354c365c6146101bc5780636fb92589146101e357806380031e371461020a57600080fd5b80630542975c146100ef5780630b3429a21461014057806314e32da414610170575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610137565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b610162610308565b610225610220366004610adb565b610384565b60408051938452602084019290925290820152606001610137565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101626108bf565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006103757f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b8f565b61037f9190610b8f565b905090565b60008060006103d86040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b846080015185606001516103ec9190610b8f565b6020820152600060808201527f000000000000000000000000000000000000000000000000000000000000000060408201526104266108bf565b606082015260208101511561055d57602081015160608601516104489161090b565b60e08083019190915260408087015160208801519288015161010089015192517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291939216906370a0823190602401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190610ba7565b6105019190610b8f565b61050b9190610bc0565b808252602082015161051c91610b8f565b610100820181905260208201516105329161090b565b60a082015284516101008201516105579161054c91610b8f565b60208301519061090b565b60c08201525b7f00000000000000000000000000000000000000000000000000000000000000008160a0015111156106be5760006105e57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008460a001516105df9190610bc0565b9061090b565b90506106117f00000000000000000000000000000000000000000000000000000000000000008261094a565b61063b907f0000000000000000000000000000000000000000000000000000000000000000610b8f565b8260600181815161064c9190610b8f565b9052506106797f00000000000000000000000000000000000000000000000000000000000000008261094a565b6106a3907f0000000000000000000000000000000000000000000000000000000000000000610b8f565b826040018181516106b49190610b8f565b9052506107989050565b6107197f00000000000000000000000000000000000000000000000000000000000000006105df8360a001517f000000000000000000000000000000000000000000000000000000000000000061094a90919063ffffffff16565b8160600181815161072a9190610b8f565b90525060a0810151610783907f0000000000000000000000000000000000000000000000000000000000000000906105df907f00000000000000000000000000000000000000000000000000000000000000009061094a565b816040018181516107949190610b8f565b9052505b7f00000000000000000000000000000000000000000000000000000000000000008160e00151111561085c57600061081a7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008460e001516105df9190610bc0565b90506108467f00000000000000000000000000000000000000000000000000000000000000008261094a565b826060018181516108579190610b8f565b905250505b6108a18560c001516127106108719190610bc0565b61089b8360c0015161089589606001518a6080015187604001518c60a001516109a1565b9061094a565b90610a08565b60808201819052606082015160409092015190969195509350915050565b600061037f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b8f565b600081156b033b2e3c9fd0803ce80000006002840419048411171561092f57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff8390048411151761097f57600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b6000806109ae8587610b8f565b9050806109bf576000915050610a00565b60006109ce8561089588610a4b565b905060006109df856108958a610a4b565b905060006109f96109ef85610a4b565b6105df8486610b8f565b9450505050505b949350505050565b600081157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec7783900484111517610a3d57600080fd5b506127109102611388010490565b633b9aca008181029081048214610a6157600080fd5b919050565b604051610120810167ffffffffffffffff81118282101715610ab1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6157600080fd5b60006101208284031215610aee57600080fd5b610af6610a66565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c0820152610b4260e08401610ab7565b60e0820152610100610b55818501610ab7565b908201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610ba257610ba2610b60565b500190565b600060208284031215610bb957600080fd5b5051919050565b600082821015610bd257610bd2610b60565b50039056fea26469706673582212206c85456f70dbccc8249d84afb977ad8eedbba6b85b3d08a76f2741aa70e31c6964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a58987091161008c578063bc62690811610066578063bc6269081461026f578063d5cd739114610295578063f4202409146102bb578063fe5fd698146102e157600080fd5b8063a589870914610212578063a9c622f814610240578063acd786861461026757600080fd5b806334762ca5116100c857806334762ca51461019657806354c365c6146101bc5780636fb92589146101e357806380031e371461020a57600080fd5b80630542975c146100ef5780630b3429a21461014057806314e32da414610170575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610137565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b610162610308565b610225610220366004610adb565b610384565b60408051938452602084019290925290820152606001610137565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101626108bf565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b7f0000000000000000000000000000000000000000000000000000000000000000610162565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006103757f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b8f565b61037f9190610b8f565b905090565b60008060006103d86040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b846080015185606001516103ec9190610b8f565b6020820152600060808201527f000000000000000000000000000000000000000000000000000000000000000060408201526104266108bf565b606082015260208101511561055d57602081015160608601516104489161090b565b60e08083019190915260408087015160208801519288015161010089015192517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291939216906370a0823190602401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190610ba7565b6105019190610b8f565b61050b9190610bc0565b808252602082015161051c91610b8f565b610100820181905260208201516105329161090b565b60a082015284516101008201516105579161054c91610b8f565b60208301519061090b565b60c08201525b7f00000000000000000000000000000000000000000000000000000000000000008160a0015111156106be5760006105e57f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008460a001516105df9190610bc0565b9061090b565b90506106117f00000000000000000000000000000000000000000000000000000000000000008261094a565b61063b907f0000000000000000000000000000000000000000000000000000000000000000610b8f565b8260600181815161064c9190610b8f565b9052506106797f00000000000000000000000000000000000000000000000000000000000000008261094a565b6106a3907f0000000000000000000000000000000000000000000000000000000000000000610b8f565b826040018181516106b49190610b8f565b9052506107989050565b6107197f00000000000000000000000000000000000000000000000000000000000000006105df8360a001517f000000000000000000000000000000000000000000000000000000000000000061094a90919063ffffffff16565b8160600181815161072a9190610b8f565b90525060a0810151610783907f0000000000000000000000000000000000000000000000000000000000000000906105df907f00000000000000000000000000000000000000000000000000000000000000009061094a565b816040018181516107949190610b8f565b9052505b7f00000000000000000000000000000000000000000000000000000000000000008160e00151111561085c57600061081a7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008460e001516105df9190610bc0565b90506108467f00000000000000000000000000000000000000000000000000000000000000008261094a565b826060018181516108579190610b8f565b905250505b6108a18560c001516127106108719190610bc0565b61089b8360c0015161089589606001518a6080015187604001518c60a001516109a1565b9061094a565b90610a08565b60808201819052606082015160409092015190969195509350915050565b600061037f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b8f565b600081156b033b2e3c9fd0803ce80000006002840419048411171561092f57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff8390048411151761097f57600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b6000806109ae8587610b8f565b9050806109bf576000915050610a00565b60006109ce8561089588610a4b565b905060006109df856108958a610a4b565b905060006109f96109ef85610a4b565b6105df8486610b8f565b9450505050505b949350505050565b600081157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec7783900484111517610a3d57600080fd5b506127109102611388010490565b633b9aca008181029081048214610a6157600080fd5b919050565b604051610120810167ffffffffffffffff81118282101715610ab1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6157600080fd5b60006101208284031215610aee57600080fd5b610af6610a66565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c0820152610b4260e08401610ab7565b60e0820152610100610b55818501610ab7565b908201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610ba257610ba2610b60565b500190565b600060208284031215610bb957600080fd5b5051919050565b600082821015610bd257610bd2610b60565b50039056fea26469706673582212206c85456f70dbccc8249d84afb977ad8eedbba6b85b3d08a76f2741aa70e31c6964736f6c634300080a0033",
  "devdoc": {
    "author": "Aave",
    "details": "The model of interest rate is based on 2 slopes, one before the `OPTIMAL_USAGE_RATIO` point of usage and another from that one to 100%. - An instance of this same contract, can't be used across different Aave markets, due to the caching   of the PoolAddressesProvider",
    "kind": "dev",
    "methods": {
      "calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address))": {
        "params": {
          "params": "The parameters needed to calculate interest rates"
        },
        "returns": {
          "_0": "liquidityRate The liquidity rate expressed in rays",
          "_1": "stableBorrowRate The stable borrow rate expressed in rays",
          "_2": "variableBorrowRate The variable borrow rate expressed in rays"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "baseStableRateOffset": "The premium on top of variable rate for base stable borrowing rate",
          "baseVariableBorrowRate": "The base variable borrow rate",
          "optimalStableToTotalDebtRatio": "The optimal stable debt to total debt ratio of the reserve",
          "optimalUsageRatio": "The optimal usage ratio",
          "provider": "The address of the PoolAddressesProvider contract",
          "stableRateExcessOffset": "The premium on top of stable rate when there stable debt surpass the threshold",
          "stableRateSlope1": "The stable rate slope below optimal usage ratio",
          "stableRateSlope2": "The stable rate slope above optimal usage ratio",
          "variableRateSlope1": "The variable rate slope below optimal usage ratio",
          "variableRateSlope2": "The variable rate slope above optimal usage ratio"
        }
      },
      "getBaseStableBorrowRate()": {
        "returns": {
          "_0": "The base stable borrow rate, expressed in ray"
        }
      },
      "getBaseVariableBorrowRate()": {
        "returns": {
          "_0": "The base variable borrow rate, expressed in ray"
        }
      },
      "getMaxVariableBorrowRate()": {
        "returns": {
          "_0": "The maximum variable borrow rate, expressed in ray"
        }
      },
      "getStableRateExcessOffset()": {
        "details": "It's an additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO",
        "returns": {
          "_0": "The stable rate excess offset, expressed in ray"
        }
      },
      "getStableRateSlope1()": {
        "details": "It's the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO",
        "returns": {
          "_0": "The stable rate slope, expressed in ray"
        }
      },
      "getStableRateSlope2()": {
        "details": "It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO",
        "returns": {
          "_0": "The stable rate slope, expressed in ray"
        }
      },
      "getVariableRateSlope1()": {
        "details": "It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO",
        "returns": {
          "_0": "The variable rate slope, expressed in ray"
        }
      },
      "getVariableRateSlope2()": {
        "details": "It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO",
        "returns": {
          "_0": "The variable rate slope, expressed in ray"
        }
      }
    },
    "stateVariables": {
      "ADDRESSES_PROVIDER": {
        "return": "The address of the PoolAddressesProvider contract",
        "returns": {
          "_0": "The address of the PoolAddressesProvider contract"
        }
      },
      "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO": {
        "details": "It's always equal to 1-optimal stable to total debt ratio (added as constant for gas optimizations)",
        "return": "The max excess stable to total debt ratio, expressed in ray.",
        "returns": {
          "_0": "The max excess stable to total debt ratio, expressed in ray."
        }
      },
      "MAX_EXCESS_USAGE_RATIO": {
        "details": "It's always equal to 1-optimal usage ratio (added as constant for gas optimizations)",
        "return": "The max excess usage ratio, expressed in ray.",
        "returns": {
          "_0": "The max excess usage ratio, expressed in ray."
        }
      },
      "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO": {
        "return": "The optimal stable to total debt ratio, expressed in ray.",
        "returns": {
          "_0": "The optimal stable to total debt ratio, expressed in ray."
        }
      },
      "OPTIMAL_USAGE_RATIO": {
        "return": "The optimal usage ratio, expressed in ray.",
        "returns": {
          "_0": "The optimal usage ratio, expressed in ray."
        }
      }
    },
    "title": "DefaultReserveInterestRateStrategy contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the address of the PoolAddressesProvider"
      },
      "MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO()": {
        "notice": "Returns the excess stable debt ratio above the optimal."
      },
      "MAX_EXCESS_USAGE_RATIO()": {
        "notice": "Returns the excess usage ratio above the optimal."
      },
      "OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO()": {
        "notice": "Returns the optimal stable to total debt ratio of the reserve."
      },
      "OPTIMAL_USAGE_RATIO()": {
        "notice": "Returns the usage ratio at which the pool aims to obtain most competitive borrow rates."
      },
      "calculateInterestRates((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address))": {
        "notice": "Calculates the interest rates depending on the reserve's state and configurations"
      },
      "getBaseStableBorrowRate()": {
        "notice": "Returns the base stable borrow rate"
      },
      "getBaseVariableBorrowRate()": {
        "notice": "Returns the base variable borrow rate"
      },
      "getMaxVariableBorrowRate()": {
        "notice": "Returns the maximum variable borrow rate"
      },
      "getStableRateExcessOffset()": {
        "notice": "Returns the stable rate excess offset"
      },
      "getStableRateSlope1()": {
        "notice": "Returns the stable rate slope below optimal usage ratio"
      },
      "getStableRateSlope2()": {
        "notice": "Returns the stable rate slope above optimal usage ratio"
      },
      "getVariableRateSlope1()": {
        "notice": "Returns the variable rate slope below optimal usage ratio"
      },
      "getVariableRateSlope2()": {
        "notice": "Returns the variable rate slope above optimal usage ratio"
      }
    },
    "notice": "Implements the calculation of the interest rates depending on the reserve state",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}